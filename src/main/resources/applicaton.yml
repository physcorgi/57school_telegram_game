spring:
  application:
    name: demo
  profiles:
    active: dev  # Используем dev-профиль по умолчанию
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/telegram_bot_db
    username: admin
    password: admin
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        globally_quoted_identifiers: false
        schema_update.unique_constraint_strategy: SKIP
        connection.provider_disables_autocommit: false
        enable_lazy_load_no_trans: true
        event:
          merge.entity_copy_observer: allow
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/master.yaml

# Конфигурация телеграм-бота
ktgram:
  bot:
    token:  # Реальный токен от BotFather
    username:  # Имя вашего бота

# PostgreSQL профиль
---
spring:
  config:
    activate:
      on-profile: postgres
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/telegram_bot_db
    username: admin
    password: admin
  jpa:
    hibernate:
      ddl-auto: validate  # Только проверяем структуру БД, не создаем индексы заново
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

# Профиль для разработки с использованием H2
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    username: sa
    password: password
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop  # Создаем БД с нуля при запуске
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect

# Детальные логи для отладки
logging:
  level:
    root: INFO
    com.example: DEBUG
    org.springframework: INFO
    org.hibernate: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE